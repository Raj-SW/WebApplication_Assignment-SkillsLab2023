<head>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/Content/Styling/AdminPendingAccountPartialViewStyling.css">
    <link href="~/Content/toastr.css" rel="stylesheet" />
    <script src="~/Scripts/toastr.js"></script>
</head>
<div class="activate-pending-account-container">
    <h3>Unactivated Users</h3>
    <div class="pending-user-accounts-container">
        <table class="table">
            <thead>
                <tr>
                    <th>User ID</th>
                    <th>NIC</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Mobile Number</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in ViewBag.ListOfPendingUserAccounts)
                {
                    <tr>
                        <td>@user.UserId</td>
                        <td>@user.NIC</td>
                        <td>@user.UserFirstName</td>
                        <td>@user.UserLastName</td>
                        <td>@user.MobileNum</td>
                        <td>
                            <div class="accordion" id="accordionUser_@user.UserId">
                                <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#collapseUser_@user.UserId" aria-expanded="false" aria-controls="collapseUser_@user.UserId">
                                    Activate
                                </button>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="6">
                            <div id="collapseUser_@user.UserId" class="collapse collapse-row-styling" data-parent="#accordionUser_@user.UserId">
                                <label for="departmentDropdown_@user.UserId">Department:</label>
                                <select class="form-control" id="departmentDropdown_@user.UserId" onchange="getManagersByDepartment(this.value, @user.UserId)">
                                    @foreach (var department in ViewBag.ListOfDepartments)
                                    {
                                        <option value="@department.DepartmentId">@department.DepartmentName</option>
                                    }
                                </select>
                                <label for="managerDropdown_@user.UserId">Manager:</label>
                                <select class="form-control" id="managerDropdown_@user.UserId">
                                </select>
                                <label for="roleDropdown_@user.UserId">Role:</label>
                                <select class="form-control" id="roleDropdown_@user.UserId">
                                    @foreach (var role in ViewBag.ListOfUserRoles)
                                    {
                                        <option value="@role.RoleId">@role.RoleName</option>
                                    }
                                </select>
                                <button class="btn btn-primary" onclick="ActivatePendingAccount('@user.UserId')">Assign</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
<script>
    function getManagersByDepartment(departmentId, userId) {
        console.log("department id ", departmentId);
        fetch('/User/GetAllManagersByDepartmentIdAsync', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ departmentId: departmentId })
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error("Error: " + response.status);
                }
            })
            .then(data => {
                if (data.result) {
                    console.log("managers ", data.managers);
                    populateManagerDropdown(data.managers, userId);
                } else {
                    console.log("Error in data");
                }
            })
            .catch(error => {
                console.error("Fetch error: ", error);
            });
    }
    function populateManagerDropdown(managersList, userId) {
        var managerDropdown = document.getElementById("managerDropdown_" + userId);
        managerDropdown.innerHTML = "";
        var defaultOption = document.createElement("option");
        defaultOption.text = "Select Manager";
        defaultOption.value = null;
        managerDropdown.add(defaultOption);
        managersList.forEach(manager => {
            var option = document.createElement("option");
            option.text = manager.UserFirstName + " " + manager.UserLastName;
            option.value = manager.UserId;
            managerDropdown.add(option);
        });
    }
    function ActivatePendingAccount(userId) {
        var departmentId = document.getElementById("departmentDropdown_" + userId).value;
        var managerId = document.getElementById("managerDropdown_" + userId).value;
        var roleId = document.getElementById("roleDropdown_" + userId).value;
        if (!departmentId && !managerId && !roleId) {
            toastr.error("Please select all required values");
            return false;
        }
        var ActivationDTO = {
            UserId: userId,
            DepartmentId: departmentId,
            ManagerId: managerId,
            RoleId: roleId
        };
        console.log("ActivationDTO", ActivationDTO);
        fetch('/User/ActivatePendingAccountAsync', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(ActivationDTO)
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    toastr.error("Internal server error");
                    return false;
                }
            })
            .then(data => {
                if (data.result) {
                    toastr.success(data.message, '', { timeOut: 1000, });
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                    return true;
                } else {
                    toastr.error(data.message, '', { timeOut: 1000, });
                    return false;
                }
            })
            .catch(error => {
                toastr.error("Internal server error " + error, '', { timeOut: 1000, });
                return false;
            });
    }
</script>
